/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Film } from "./Film";
import { FilmCountArgs } from "./FilmCountArgs";
import { FilmFindManyArgs } from "./FilmFindManyArgs";
import { FilmFindUniqueArgs } from "./FilmFindUniqueArgs";
import { CreateFilmArgs } from "./CreateFilmArgs";
import { UpdateFilmArgs } from "./UpdateFilmArgs";
import { DeleteFilmArgs } from "./DeleteFilmArgs";
import { FilmWhereInput } from "./FilmWhereInput";
import { FilmService } from "../film.service";
@graphql.Resolver(() => Film)
export class FilmResolverBase {
  constructor(protected readonly service: FilmService) {}

  async _filmsMeta(
    @graphql.Args() args: FilmCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Film])
  async films(@graphql.Args() args: FilmFindManyArgs): Promise<Film[]> {
    return this.service.films(args);
  }

  @graphql.Query(() => Film, { nullable: true })
  async film(@graphql.Args() args: FilmFindUniqueArgs): Promise<Film | null> {
    const result = await this.service.film(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Film)
  async createFilm(@graphql.Args() args: CreateFilmArgs): Promise<Film> {
    return await this.service.createFilm({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Film)
  async updateFilm(@graphql.Args() args: UpdateFilmArgs): Promise<Film | null> {
    try {
      return await this.service.updateFilm({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Film)
  async deleteFilm(@graphql.Args() args: DeleteFilmArgs): Promise<Film | null> {
    try {
      return await this.service.deleteFilm(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Query(() => [FilmFindManyArgs])
  async SearchFilms(
    @graphql.Args()
    args: FilmWhereInput
  ): Promise<FilmFindManyArgs[]> {
    return this.service.SearchFilms(args);
  }
}
