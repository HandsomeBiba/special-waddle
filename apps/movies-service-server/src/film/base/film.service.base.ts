/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Film as PrismaFilm } from "@prisma/client";
import { FilmWhereInput } from "./FilmWhereInput";
import { FilmFindManyArgs } from "./FilmFindManyArgs";

export class FilmServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.FilmCountArgs, "select">): Promise<number> {
    return this.prisma.film.count(args);
  }

  async films(args: Prisma.FilmFindManyArgs): Promise<PrismaFilm[]> {
    return this.prisma.film.findMany(args);
  }
  async film(args: Prisma.FilmFindUniqueArgs): Promise<PrismaFilm | null> {
    return this.prisma.film.findUnique(args);
  }
  async createFilm(args: Prisma.FilmCreateArgs): Promise<PrismaFilm> {
    return this.prisma.film.create(args);
  }
  async updateFilm(args: Prisma.FilmUpdateArgs): Promise<PrismaFilm> {
    return this.prisma.film.update(args);
  }
  async deleteFilm(args: Prisma.FilmDeleteArgs): Promise<PrismaFilm> {
    return this.prisma.film.delete(args);
  }
  async SearchFilms(args: FilmWhereInput): Promise<FilmFindManyArgs[]> {
    throw new Error("Not implemented");
  }
}
